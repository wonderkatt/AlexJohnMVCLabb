// <auto-generated />
using BloodBowlTeamManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BloodBowlTeamManager.Migrations
{
    [DbContext(typeof(BBContext))]
    partial class BBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BloodBowlTeamManager.AgilitySkill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AgiSkill")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("AgilitySkills");
                });

            modelBuilder.Entity("BloodBowlTeamManager.Coach", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("BloodBowlTeamManager.GeneralSkill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GenSkill")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("GeneralSkills");
                });

            modelBuilder.Entity("BloodBowlTeamManager.Mutation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MutationSkill")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Mutations");
                });

            modelBuilder.Entity("BloodBowlTeamManager.PassSkill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pasSkill")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PassSkills");
                });

            modelBuilder.Entity("BloodBowlTeamManager.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AgilityValue")
                        .HasColumnType("int");

                    b.Property<int>("ArmourValue")
                        .HasColumnType("int");

                    b.Property<int>("Casualties")
                        .HasColumnType("int");

                    b.Property<int>("Completions")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Interceptions")
                        .HasColumnType("int");

                    b.Property<int>("MVP")
                        .HasColumnType("int");

                    b.Property<bool>("MissNextGame")
                        .HasColumnType("bit");

                    b.Property<int>("MovementValue")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PlayedGames")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SPP")
                        .HasColumnType("int");

                    b.Property<int>("StrengthValue")
                        .HasColumnType("int");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Touchdowns")
                        .HasColumnType("int");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BloodBowlTeamManager.Race", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Apothecary")
                        .HasColumnType("bit");

                    b.Property<string>("RaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RerollCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("BloodBowlTeamManager.SpecialSkill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpecSkill")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("SpecialSkill");
                });

            modelBuilder.Entity("BloodBowlTeamManager.StrengthSkill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StrSkill")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("StrengthSkills");
                });

            modelBuilder.Entity("BloodBowlTeamManager.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumberOfReRolls")
                        .HasColumnType("int");

                    b.Property<string>("RaceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Teamvalue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("RaceId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BloodBowlTeamManager.AgilitySkill", b =>
                {
                    b.HasOne("BloodBowlTeamManager.Player", "Player")
                        .WithMany("AgilitySkills")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BloodBowlTeamManager.GeneralSkill", b =>
                {
                    b.HasOne("BloodBowlTeamManager.Player", "Player")
                        .WithMany("GeneralSkills")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BloodBowlTeamManager.Mutation", b =>
                {
                    b.HasOne("BloodBowlTeamManager.Player", "Player")
                        .WithMany("Mutations")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BloodBowlTeamManager.PassSkill", b =>
                {
                    b.HasOne("BloodBowlTeamManager.Player", "Player")
                        .WithMany("PassingSkills")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BloodBowlTeamManager.Player", b =>
                {
                    b.HasOne("BloodBowlTeamManager.Race", "Race")
                        .WithMany("Players")
                        .HasForeignKey("RaceId");

                    b.HasOne("BloodBowlTeamManager.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("BloodBowlTeamManager.SpecialSkill", b =>
                {
                    b.HasOne("BloodBowlTeamManager.Player", "Player")
                        .WithMany("SpecialSkills")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BloodBowlTeamManager.StrengthSkill", b =>
                {
                    b.HasOne("BloodBowlTeamManager.Player", "Player")
                        .WithMany("StrengthSkills")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("BloodBowlTeamManager.Team", b =>
                {
                    b.HasOne("BloodBowlTeamManager.Coach", "Coach")
                        .WithMany("Teams")
                        .HasForeignKey("CoachId");

                    b.HasOne("BloodBowlTeamManager.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");
                });
#pragma warning restore 612, 618
        }
    }
}
